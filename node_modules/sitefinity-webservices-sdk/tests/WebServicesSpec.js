describe("mocking requests", function () {
    describe("query builds", function () {
        var query = new Sitefinity.Query();
        var results = [
            {
                expected: { $filter: "endswith(Title, '%26')" },
                actual: query.where().endsWith("Title", "&").done().build()
            },
            {
                expected: { $filter: "(Title eq '%26')" },
                actual: query.where().eq("Title", "&").done().build()
            },
            {
                expected: { $filter: "endswith(Title, '%2B')" },
                actual: query.where().endsWith("Title", "+").done().build()
            },
            {
                expected: { $filter: "(Title eq '%2B')" },
                actual: query.where().eq("Title", "+").done().build()
            },
            {
                expected: { $filter: "endswith(Title, '%2F')" },
                actual: query.where().endsWith("Title", "/").done().build()
            },
            {
                expected: { $filter: "(Title eq '%2F')" },
                actual: query.where().eq("Title", "/").done().build()
            },
            {
                expected: { $filter: "endswith(Title, '%3F')" },
                actual: query.where().endsWith("Title", "?").done().build()
            },
            {
                expected: { $filter: "(Title eq '%3F')" },
                actual: query.where().eq("Title", "?").done().build()
            },
            {
                expected: { $filter: "endswith(Title, '%25')" },
                actual: query.where().endsWith("Title", "%").done().build()
            },
            {
                expected: { $filter: "(Title eq '%23')" },
                actual: query.where().eq("Title", "#").done().build()
            },
            {
                expected: { $filter: "(Title eq '%23')" },
                actual: query.where().eq("Title", "#").done().build()
            },
            {
                expected: { $filter: "(Title eq '%23%3F%2F%25%2B')" },
                actual: query.where().eq("Title", "#?/%+").done().build()
            },
            {
                expected: { $filter: "endswith(Title, 'Record')" },
                actual: query.where().endsWith("Title", "Record").done().build()
            },
            {
                expected: { $filter: "(endswith(Title, 'Record') or (age ne '15') or (Content eq 'test'))" },
                actual: query.where().or().endsWith("Title", "Record").ne('age', '15').eq('Content', 'test').done().done().build()
            },
            {
                expected: { $filter: "(number lt '15') and (number gt '5') and ((Title eq 'test'))" },
                actual: query.where().lt('number', '15').gt('number', '5').or().eq('Title', 'test').done().done().build()
            },
            {
                expected: { $orderby: "Title desc" },
                actual: query.order("Title desc").build()
            },
            {
                expected: { $select: 'Title, Content' },
                actual: query.select('Title', 'Content').build()
            },
            {
                expected: { $filter: "(Title eq 'newTitleUPDATE1')", $select: 'Title', $count: true },
                actual: query.select("Title").where().eq('Title', 'newTitleUPDATE1').done().count().build()
            },
            {
                expected: { $top: 5, $skip: 1 },
                actual: query.skip(1).take(5).build()
            },
            {
                expected: { $filter: "startswith(Title, 't')" },
                actual: query.where().startsWith("Title", "t").done().build()
            },
            {
                expected: { $filter: "contains(Title, 'test')" },
                actual: query.where().contains("Title", "test").done().build()
            },
            {
                expected: { $filter: "(startswith(Title, 'test') or (Content eq 'test'))" },
                actual: query.where().or().startsWith("Title", "test").eq('Content', 'test').done().done().build()
            },
            {
                expected: { $filter: "startswith(Title, 'test')", $orderby: "Content desc", $top: 4, $skip: 0 },
                actual: query.order("Content desc").where().startsWith("Title", "test").done().skip(0).take(4).build()
            },
            {
                expected: { $filter: "(Id eq 00000000-0000-0000-0000-000000000000)" },
                actual: query.where().eq("Id", "00000000-0000-0000-0000-000000000000").done().build()
            },
            {
                expected: { $select: "Title", $expand: "Tags" },
                actual: query.expand('Tags').select('Title').build()
            },
            {
                expected: { $filter: "((Tags eq 00000000-0000-0000-0000-000000000000) or (Tags eq 00000000-0000-0000-0000-000000000000))" },
                actual: query.where().or().eq("Tags", "00000000-0000-0000-0000-000000000000").eq("Tags", "00000000-0000-0000-0000-000000000000").done().done().build()
            },
            {
                expected: { $filter: "(Tags/any(x:x eq 00000000-0000-0000-0000-000000000000))" },
                actual: query.where().any().eq("Tags", "00000000-0000-0000-0000-000000000000").done().done().build()
            },
            {
                expected: { $filter: "(Tags/any(x:x eq 00000000-0000-0000-0000-000000000000 and x ne 00000000-0000-0000-0000-000000000000))" },
                actual: query.where().any().eq("Tags", "00000000-0000-0000-0000-000000000000").ne("Tags", "00000000-0000-0000-0000-000000000000").done().done().build()
            },
            {
                expected: { $filter: "((Tags/any(x:x eq 00000000-0000-0000-0000-000000000000 or x ne 00000000-0000-0000-0000-000000000000 or x eq 00000000-0000-0000-0000-000000000000)))" },
                actual: query.where().or().any().eq("Tags", "00000000-0000-0000-0000-000000000000").ne("Tags", "00000000-0000-0000-0000-000000000000").eq("Tags", "00000000-0000-0000-0000-000000000000").done().done().done().build()
            },
            {
                expected: { $filter: "((Tags/any(x:x eq 00000000-0000-0000-0000-000000000000 or x ne 00000000-0000-0000-0000-000000000000)))" },
                actual: query.where().or().any().eq("Tags", "00000000-0000-0000-0000-000000000000").ne("Tags", "00000000-0000-0000-0000-000000000000").done().done().done().build()
            },
            {
                expected: { $filter: "(StringCollection/any(x:startswith(x, 'test')))" },
                actual: query.where().any().startsWith("StringCollection", "test").done().done().build()
            },
            {
                expected: { $filter: "(StringCollection/any(x:endswith(x, 'test')))" },
                actual: query.where().any().endsWith("StringCollection", "test").done().done().build()
            },
            {
                expected: { $filter: "(StringCollection/any(x:contains(x, 'test')))" },
                actual: query.where().any().contains("StringCollection", "test").done().done().build()
            },
            {
                expected: { $filter: "(StringCollection/any(x:contains(x, 'test'))) and (Title eq 'test')" },
                actual: query.where().any().contains("StringCollection", "test").done().eq('Title', 'test').done().build()
            }
        ];

        function assert_queries(expected, actual) {
            it("should have the expected query", function () {
                expect(expected).toEqual(actual);
            });
        }

        for (var index in results) {
            assert_queries(results[index].expected, results[index].actual);
        }
    });

    /*describe("Date fields", function () {
        var request, response;
        var success, error, complete;
        var sitefinity;

        beforeEach(function () {
            jasmine.Ajax.install();
            sitefinity = new Sitefinity({ serviceUrl: "localhost.com/api/default", });
            success = jasmine.createSpy("failure");
        });

        afterEach(function () {
            jasmine.Ajax.uninstall();
        });

        describe("Create request", function () {
            beforeEach(function () {
                var data = {
                    "Title": 'Title 1',
                    "UrlName": "newUrlName",
                    "Content": "new content",
                    "Summary": "new summary",
                    "LastModified": new Date("11/11/2011")
                };

                var dataOptions = {
                    urlName: "news",
                    providerName: "OpenAccessDataProvider",
                    cultureName: "en"
                }

                var data = sitefinity.data(dataOptions);
                data.create({
                    data: data,
                    successCb: function (data) { success(); },
                    failureCb: function () { }
                });

                request = jasmine.Ajax.requests.mostRecent();
                response = { status: 201, statusText: "Created", contentType: "application/json", responseText: '{"@odata.context":"http://localhost:8989/api/default/$metadata#newsitems/$entity","Id":"7b6e6edd-a7ca-604d-ba8f-ff000003168b","LastModified":"2011-11-10T22:00:00.000Z","PublicationDate":"2016-04-05T07:32:19.0029403Z","ExpirationDate":null,"Title":"newTitleN11","Description":"","DateCreated":"2016-04-05T07:32:19.0189417Z","UrlName":"newUrlName","Summary":"new summary","Content":"new content","Author":"","SourceName":null,"SourceSite":null}' };
                request.respondWith(response);
            });

            it("should have the expected date.", function () {
                var lastModified = JSON.parse(request.response);
                expect(lastModified["LastModified"]).toEqual(new Date("11/11/2011").toISOString());
                expect(success).toHaveBeenCalledWith(request.response);
            });

        });
    });*/
});
