import { GetRequest, GetByIdRequest, CreateRequest, UpdateRequest, DeleteRequest, GetRelatedRequest, GetRelatedByIdRequest, DeleteRelatedRequest, DeleteRelatedByIdRequest, CreateRelatedRequest, UploadRequest } from "./Request";
import { ExecutableRequest } from './ExecutableRequest';

var BatchRequest = require('./BatchRequest');

export class RequestFactory {
    public token: any;
    private handlers: any;
    private enableUnlimitedChoices: boolean;

    constructor(options: any) {
        this.token = null;
        this.handlers = options.handlers;
        this.enableUnlimitedChoices = options.enableUnlimitedChoices;
    }

    get(parameters: any) {
        return this.createExecutor(new GetRequest(parameters));
    }

    getSingle(parameters: any) {
        return this.createExecutor(new GetByIdRequest(parameters));
    }

    create(parameters: any) {
        return this.createExecutor(new CreateRequest(parameters));
    }

    update(parameters: any) {
        return this.createExecutor(new UpdateRequest(parameters));
    }

    destroy(parameters: any) {
        return this.createExecutor(new DeleteRequest(parameters));
    }

    getProperty(parameters: any) {
        return this.createExecutor(new GetRelatedRequest(parameters));
    }

    getRelated(parameters: any) {
        return this.createExecutor(new GetRelatedRequest(parameters));
    }

    getRelatedById(parameters: any) {
        return this.createExecutor(new GetRelatedByIdRequest(parameters));
    }

    destroyRelated(parameters: any) {
        return this.createExecutor(new DeleteRelatedRequest(parameters));
    }

    destroyRelatedById(parameters: any) {
        return this.createExecutor(new DeleteRelatedByIdRequest(parameters));
    }

    createRelated(parameters: any) {
        return this.createExecutor(new CreateRelatedRequest(parameters));
    }

    batch(parameters) {
        parameters._factory = this;
        return new BatchRequest(parameters);
    }

    upload(parameters: any) {
        return this.createExecutor(new UploadRequest(parameters));
    }

    createExecutor(request: any) {
        var executor = new ExecutableRequest({
            request: request,
            handlers: this.handlers || {},
            token: this.token,
            enableUnlimitedChoices: this.enableUnlimitedChoices
        });

        // TODO
        (executor as any).navigationProperty = request.navigationProperty;
        return executor;
    }
}
