import { RequestFactory } from './Requests/RequestFactory';
import { Authentication } from './Authentication';
import { Data } from './Data';
import { Query } from './Query';
import { utils } from './utils';

/**
* @class Sitefinity
* @classdesc The constructor of the Sitefinity JavaScript SDK. This is the entry point for the SDK.
* @property {Object} authentication - The authentication object used for authenticating to Sitefinity. See {@link Authentication}
* @param {object} options - An object containing configuration options for the Setup object.
* @param {string} options.serviceUrl - Your service url that points to the configured instance of Sitefinity service.
* @param {string} options.siteId - The ID of the site, for which the query will be executed.
* @param {string} options.handlers - The global handlers for request execution
* @param {string} options.handlers.successCb - The success handler.
* @param {string} options.handlers.failureCb - The failure handler.
*/
export class Sitefinity {
    private factory: RequestFactory;
    private authentication: Authentication;
    private profileUrl: string;
    private siteId: string;
    public static Query: typeof Query = Query;

    constructor(options: any) {
        this.profileUrl = utils.addTrailingSlash(options.serviceUrl);
        this.siteId = options.siteId;
        this.factory = new RequestFactory({
            handlers: options.handlers,
            enableUnlimitedChoices: options.enableUnlimitedChoices
        });

        this.authentication = new Authentication({
            serviceUrl: this.profileUrl,
            factory: this.factory
        });
    }

    /**
* Creates a new {@link Data} class.
* @memberOf Sitefinity
* @instance
* @param {object} options - An object containing configuration options for the Setup object.
* @param {string} options.urlName - The URL name of the type..
* @param {string} [options.providerName] - The name of the provider. If empty the default provider for the site will be used.
* @param {string} [options.cultureName] - The name of the culture. If empty the default culture for the site will be used.
* @example
* var data = sf.data({
*     urlName: "newsitems",
*     providerName: "OpenAccessDataProvider",
*     cultureName: "en"
* });
* @returns {Data}
*/
    data(options: any) {
        var optionsServiceUrl = options.serviceUrl ? utils.addTrailingSlash(options.serviceUrl) : options.serviceUrl;
        var dataOptions = {
            baseUrl: optionsServiceUrl || this.profileUrl,
            SFParams: {
                provider: options.providerName,
                culture: options.cultureName,
                siteId: options.siteId || this.siteId
            },
            entitySet: options.urlName
        }

        this.factory.token = this.authentication.getToken();
        return new Data(dataOptions, this.factory);
    }

    /**
    * Creates a new {@link BatchRequest} class. OData batch requests -> {@link http://docs.oasis-open.org/odata/odata/v4.0/os/part1-protocol/odata-v4.0-os-part1-protocol.html#_Toc372793748}
    * @memberOf Sitefinity
    * @instance
    * @param {Function} success - The success callback of the batch execution.
    * @param {string} options.urlName - The URL name of the type..
    * @param {string} [options.providerName] - The name of the provider. If empty the default provider for the site will be used.
    * @param {string} [options.cultureName] - The name of the culture. If empty the default culture for the site will be used.
    * @example
    * var sf = new Sitefinity({
    *   serviceUrl: 'http://mydomain/route/service/'
    * });
    *
    * var batch = sf.batch(successCbBatch, failureCb);
    * batch.get({
    *     entitySet: entitySet,
    *     query: query8
    * });
    *
    * var transaction = batch.beginTransaction();
    * var createId = transaction.create({
    *     entitySet: entitySet,
    *     data: newsItem
    * });
    *
    * batch.endTransaction(transaction);
    *
    * var transaction2 = batch.beginTransaction();
    * var createId2 = transaction2.create({
    *     entitySet: entitySet,
    *     data: newsItem
    * });
    *
    * var updateId2 = transaction2.update({
    *     entitySet: entitySet,
    *     key: createId2,
    *     data: newsItemUpdate
    * });
    *
    * batch.endTransaction(transaction2);
    *
    * batch.get({
    *     entitySet: entitySet
    * });
    *
    * batch.execute();
    * @returns {BatchRequest}
    */
    batch(success: any, failure: any, progress: any, options: any) {
        if (typeof progress !== 'function') {
            options = progress;
            progress = null;
        }

        if (!options)
            options = {};

        this.factory.token = this.authentication.getToken();

        var optionsServiceUrl = options.serviceUrl ? utils.addTrailingSlash(options.serviceUrl) : options.serviceUrl;
        var batch = this.factory.batch({
            successCb: success,
            failureCb: failure,
            progressCb: progress,
            urlOptions: {
                baseUrl: optionsServiceUrl || this.profileUrl,
                SFParams: {
                    provider: options.providerName,
                    culture: options.cultureName,
                    siteId: options.siteId || this.siteId
                }
            }
        });

        var executor: any = this.factory.createExecutor(batch);
        executor.beginTransaction = () => {
            return batch.beginTransaction();
        }

        executor.endTransaction = (transaction) => {
            batch.endTransaction(transaction);
        }

        executor.get = (options) => {
            batch.constructor.prototype.get.call(batch, options);
        }

        executor.getOperations = (options) => {
            batch.constructor.prototype.getOperations.call(batch, options);
        }

        executor.getSingle = (options) => {
            batch.constructor.prototype.getSingle.call(batch, options);
        }

        executor.getProperty = (options) => {
            batch.constructor.prototype.getProperty.call(batch, options);
        }

        executor.getRelated = (options) => {
            batch.constructor.prototype.getRelated.call(batch, options);
        }

        executor.getRelatedById = (options) => {
            batch.constructor.prototype.getRelatedById.call(batch, options);
        }

        return executor;
    }
}
