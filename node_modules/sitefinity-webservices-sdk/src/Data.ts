/**
* @class Data
* @classdesc The constructor of the Data object. This object is used for requesting data from Sitefinity.
* @param {object} urlOptions - An object containing configuration options for the {@link Data} object.
* @param {string} urlOptions.baseUrl - Your service url that points to the configured instance of Sitefinity service.
* @param {string} urlOptions.entitySet - The url name of the type.
* @param {object} urlOptions.SFParams - An object containing configuration options for requests.
* @param {string} urlOptions.SFParams.provider - The provider name to use in each request.
* @param {string} urlOptions.SFParams.culture - The culture name to use in each request.
*/
export class Data {
    private urlOptions: any;
    private factory: any;

    constructor(urlOptions, factory) {
        this.urlOptions = urlOptions;
        this.factory = factory;
    }

    // TODO: rethink this
    /**
    * Executes a GET request to retrieve a collection of items.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.action - The OData action along with its parameters.
    * @param {object} parameters.query - The {@link WhereQuery} with which to filter the items.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    get(parameters: any) {
        parameters = parameters || {};

        // TODO: move to Request
        if (parameters.query)
            this.urlOptions.ODataParams = parameters.query;

        var request = this.factory.get({
            urlOptions: this.urlOptions,
            action: parameters.action,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb,
            fallbackProperties: parameters.fallbackProperties
        });

        request._execute();
    }

    /**
    * Executes a GET request to retrieve an/all item(s) operations.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    getOperations(parameters: any) {
        var request;
        var action = "operations";

        // Set parentId if no item key is passed
        if (!parameters.key)
            action += "?parentId=" + parameters.parentId;

        var params: any = {
            urlOptions: this.urlOptions,
            action: action,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        };

        if (parameters.key) {
            params.key = parameters.key;
            request = this.factory.getSingle(params);
        } else {
            request = this.factory.get(params);
        }

        request._execute();
    }

    /**
    * Executes a GET request for a single item.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {object} parameters.query - The {@link QueryBase} object containing the OData query options that should be sent to the server.
    * @param {string} parameters.key - The identifier of the item to be retrieved.
    * @param {string} parameters.action - The OData action along with its parameters.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    getSingle(parameters: any) {
        if (!(parameters.key))
            throw "Parameter 'key' is required!";

        if (parameters.query)
            this.urlOptions.ODataParams = parameters.query;

        var request = this.factory.getSingle({
            urlOptions: this.urlOptions,
            key: parameters.key,
            action: parameters.action,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb,
            fallbackProperties: parameters.fallbackProperties
        });

        request._execute();
    }

    /**
    * Executes a POST request for a single item.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.key - The identifier of the item.
    * @param {object} parameters.data - The payload of the request.
    * @param {string} parameters.action - The OData action along with its parameters.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    create(parameters: any) {
        if (!(parameters.data))
            throw "Parameter 'data' is required!";

        var request = this.factory.create({
            urlOptions: this.urlOptions,
            key: parameters.key,
            data: parameters.data,
            action: parameters.action,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a PATCH request to update a single item.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {bool} parameters.saveTemp - A flag indicating whether to save in temp.
    * @param {string} parameters.key - The identifier of the item to be updated.
    * @param {object} parameters.data - The payload of the request.
    * @param {string} parameters.action - The OData action along with its parameters.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    * @example
    * var data = sf.data({
    *     urlName: "newsitems",
    *     providerName: "OpenAccessDataProvider",
    *     cultureName: "en"
    * });
    *
    * var newsItemUpdate =  {
    *    "Title": 'updated news title'
    * };
    *
    * data.update({
    *   key: '00000000-0000-0000-0000-000000000000', // key of item to update
    *   data: newsItemUpdate,
    *   saveTemp: true,
    *   successCb: successCb,
    *   failureCb: failureCb
    * });
    */
    update(parameters: any) {
        if (!(parameters.key || parameters.data))
            throw "Parameters: 'data' and 'key' are required!";

        var request = this.factory.update({
            urlOptions: this.urlOptions,
            key: parameters.key,
            data: parameters.data,
            action: parameters.action,
            saveTemp: parameters.saveTemp,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a DELETE request to delete a single item.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.key - The identifier of the item to be deleted.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    destroy(parameters: any) {
        if (!(parameters.key))
            throw "Parameter 'key' is required!";

        var request = this.factory.destroy({
            urlOptions: this.urlOptions,
            key: parameters.key,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a POST request to execute a workflow operation for single item.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.key - The identifier of the item.
    * @param {object} parameters.data - The payload of the request.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    operation(parameters: any) {
        if (!(parameters.key || parameters.data))
            throw "Parameters: 'data' and 'key' are required!";

        var request = this.factory.create({
            urlOptions: this.urlOptions,
            key: parameters.key,
            action: "operation",
            data: parameters.data,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a GET request to get the property of a single item.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.key - The identifier of the item.
    * @param {string} parameters.property - The name of the property to be retrieved.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    getProperty(parameters: any) {
        if (!(parameters.key || parameters.property))
            throw "Parameters: 'data' and 'property' are required!";

        var request = this.factory.getProperty({
            urlOptions: this.urlOptions,
            key: parameters.key,
            navigationProperty: parameters.property,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a GET request to get the related property value of a single item.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.key - The identifier of the item.
    * @param {string} parameters.navigationProperty - The name of the navigation property to be retrieved.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    getRelated(parameters: any) {
        if (!(parameters.key || parameters.navigationProperty))
            throw "Parameters: 'data' and 'navigationProperty' are required!";

        var request = this.factory.getRelated({
            urlOptions: this.urlOptions,
            key: parameters.key,
            navigationProperty: parameters.navigationProperty,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a GET request to retrieve the related property value of a single item by the id of the related item.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.key - The identifier of the item.
    * @param {string} parameters.navigationProperty - The name of the navigation property to be retrieved.
    * @param {string} parameters.relatedKey - The identifier of the related item.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    getRelatedById(parameters: any) {
        if (!(parameters.key || parameters.navigationProperty || parameters.relatedKey))
            throw "Parameters: 'data', 'relatedKey' and 'navigationProperty' are required!";

        var request = this.factory.getRelatedById({
            urlOptions: this.urlOptions,
            key: parameters.key,
            relatedKey: parameters.relatedKey,
            navigationProperty: parameters.navigationProperty,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a DELETE request to retrieve the delete all of the associated members in the relation property.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.key - The identifier of the item.
    * @param {string} parameters.navigationProperty - The name of the navigation property.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    destroyRelated(parameters: any) {
        if (!(parameters.key || parameters.navigationProperty))
            throw "Parameters: 'data' and 'navigationProperty' are required!";

        var request = this.factory.destroyRelated({
            urlOptions: this.urlOptions,
            key: parameters.key,
            navigationProperty: parameters.navigationProperty,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a DELETE request to retrieve the a single entry of the associated members in the relation property.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.key - The identifier of the item.
    * @param {string} parameters.navigationProperty - The name of the navigation property.
    * @param {string} parameters.relatedKey - The identifier of the related item.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    destroyRelatedById(parameters: any) {
        if (!(parameters.key || parameters.navigationProperty || parameters.relatedKey))
            throw "Parameters: 'data', 'relatedKey' and 'navigationProperty' are required!";

        var request = this.factory.destroyRelatedById({
            urlOptions: this.urlOptions,
            key: parameters.key,
            relatedKey: parameters.relatedKey,
            navigationProperty: parameters.navigationProperty,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a POST request to add a related item to the property collection.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.key - The identifier of the item.
    * @param {string} parameters.navigationProperty - The name of the navigation property.
    * @param {string} parameters.link - The URL of the related item.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    */
    createRelated(parameters: any) {
        if (!(parameters.key || parameters.navigationProperty || parameters.link))
            throw "Parameters: 'data', 'link' and 'navigationProperty' are required!";

        var data = {
            "@odata.id": parameters.link
        }

        var request = this.factory.createRelated({
            urlOptions: this.urlOptions,
            key: parameters.key,
            navigationProperty: parameters.navigationProperty,
            data: data,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        });

        request._execute();
    }

    /**
    * Executes a POST request to upload a media item.
    * @memberOf Data
    * @instance
    * @param {object} parameters - The parameters for the request.
    * @param {string} parameters.data - The data to be uploaded.
    * @param {string} parameters.data.content - The base64 representation of the media item.
    * @param {string} parameters.data.contentType - The content type of the item. E.g. image/jpeg.
    * @param {string} parameters.data.name - The name of the media item.
    * @param {string} parameters.data.payload - Holds the JSON metadata about the image. E.g. Title, Urlname etc.
    * @param {string} parameters.data.uploadProperties - The properties passed on upload. Must contain ParentId and can contain FolderId, Title, UrlName, etc.
    * @param {Function} parameters.successCb - The success callback function.
    * @param {Function} parameters.failureCb - The error callback function.
    * @example
    *
    * var data = sf.data({
    *     urlName: "images"
    * });
    * data.upload({
    *     data: {
    *         content: "base 64 representation of the file",
    *         contentType: "image/jpeg",
    *         name: "test.jpg",
    *         payload: {
    *             Title: "Test",
    *             UrlName: "test"
    *         },
    *         uploadProperties: {
    *             ParentId: "4BA7AD46-F29B-4E65-BE17-9BF7CE5BA1FB"
    *         }
    *     },
    *     successCb: successCb,
    *     failureCb: failureCb
    * });
    */
    upload(parameters: any) {
        if (!(parameters || parameters.data || parameters.data.content || parameters.data.contentType || parameters.data || parameters.data.name || parameters.data.uploadProperties))
            throw "parameters: content, contentType, name and uploadProperties are required!";

        var options = {
            urlOptions: this.urlOptions,
            _factory: this.factory,
            successCb: parameters.successCb,
            failureCb: parameters.failureCb
        }

        var batch = this.factory.batch(options);
        var transaction = batch.beginTransaction();

        var uploadedFile = transaction.upload({
            entitySet: this.urlOptions.entitySet,
            data: parameters.data.content,
            contentType: parameters.data.contentType,
            fileName: parameters.data.name,
            uploadProperties: parameters.data.uploadProperties
        });

        if (parameters.data.payload)
            transaction.update({
                entitySet: this.urlOptions.entitySet,
                key: uploadedFile,
                data: parameters.data.payload
            });

        if (parameters.publish === true) {
            transaction.operation({
                entitySet: this.urlOptions.entitySet,
                key: uploadedFile,
                data: {
                    action: "Publish"
                }
            });
        }

        batch.endTransaction(transaction);
        var executor = this.factory.createExecutor(batch);
        executor._execute();
    }
}

